<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git切换项目分支</title>
    <url>/git/git/%E5%88%87%E6%8D%A2%E9%A1%B9%E7%9B%AE%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<p>GitHub 官方表示，从2020/10/01开始，该平台所有新建的源代码库，缺省名称为 <code>main</code>。<br>此处记录如何将<code>master</code>分支切换到<code>main</code>分支</p>
<a id="more"></a>

<h2 id="1-修改本地缺省分支"><a href="#1-修改本地缺省分支" class="headerlink" title="1.修改本地缺省分支"></a>1.修改本地缺省分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure>
<h2 id="2-git新建仓库，本地分支由master变为main"><a href="#2-git新建仓库，本地分支由master变为main" class="headerlink" title="2.git新建仓库，本地分支由master变为main"></a>2.git新建仓库，本地分支由master变为main</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b main    新建main分支，并转至main分支</span><br></pre></td></tr></table></figure>
<h2 id="3-合并两个分支"><a href="#3-合并两个分支" class="headerlink" title="3.合并两个分支"></a>3.合并两个分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></table></figure>
<h2 id="4-本地add，commit，并将本地main分支推送到远程仓库"><a href="#4-本地add，commit，并将本地main分支推送到远程仓库" class="headerlink" title="4.本地add，commit，并将本地main分支推送到远程仓库"></a>4.本地add，commit，并将本地main分支推送到远程仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用https发送请求</title>
    <url>/java/https/java/%E4%BD%BF%E7%94%A8https%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>使用<code>HttpsURLConnection</code>打开链接，使用<code>OutputStream</code>写入请求参数</p>
<a id="more"></a>
<h3 id="以发送微信模板为例"><a href="#以发送微信模板为例" class="headerlink" title="以发送微信模板为例"></a>以发送微信模板为例</h3><p>https + JSON 方式传输</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置url</span><br><span class="line">String url &#x3D; &quot;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;cgi-bin&#x2F;message&#x2F;template&#x2F;send?access_token&#x3D;&quot; + accessToken;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打开链接</span><br><span class="line">HttpsURLConnection urlConnection &#x3D;(HttpsURLConnection) new URL(url).openConnection();</span><br><span class="line">&#x2F;&#x2F; 设置post请求方式</span><br><span class="line">urlConnection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">&#x2F;&#x2F; 设置true，通过http连接，获取其返回数据</span><br><span class="line">urlConnection.setDoOutput(true);</span><br><span class="line">&#x2F;&#x2F; 使用 OutputStream 写入请求参数，其中的jsonString是JSON格式转字符串</span><br><span class="line">urlConnection.getOutputStream().write(jsonString.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure>
<h3 id="获取返回消息"><a href="#获取返回消息" class="headerlink" title="获取返回消息"></a>获取返回消息</h3><p>通过<code>InputStream</code>读取返回数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取输入流</span><br><span class="line">InputStream inputstream &#x3D; urlConnection.getInputStream();</span><br><span class="line">StringWriter writer &#x3D; new StringWriter(); &#x2F;&#x2F; 得到返回数据</span><br><span class="line">&#x2F;&#x2F; 读取拷贝输入流数据</span><br><span class="line">IOUtils.copy(inputstream, writer, StandardCharsets.UTF_8);</span><br><span class="line">inputstream.close();</span><br></pre></td></tr></table></figure>
<p>代码中的 <code>jsonString</code>是JSON格式的。因为约定传输格式为<code>application/json</code>格式，对于不同的传输格式，使用不同的传递参数。对于<code>application/x-www-form-urlencoded</code>这种，代码中<code>jsonString</code>应该是<code>StringBuffer</code>类型。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuffer params &#x3D; new StringBuffer();</span><br><span class="line">params.append(&quot;username&#x3D;&quot;).append(URLEncoder.encode(username, &quot;UTF-8&quot;));</span><br><span class="line">params.append(&quot;&amp;password&#x3D;&quot;).append(URLEncoder.encode(password, &quot;UTF-8&quot;));</span><br><span class="line">params.append(&quot;&amp;toPhoneNo&#x3D;&quot;).append(URLEncoder.encode(phoneNum, &quot;UTF-8&quot;));</span><br><span class="line">try (OutputStreamWriter out &#x3D; new OutputStreamWriter(urlConnection.getOutputStream(), &quot;UTF-8&quot;)) &#123;</span><br><span class="line">		out.write(params.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取返回数据 <code>urlConnection.getInputStream()</code>会抛出<code>IOException</code>的异常，需要在<code>catch</code>中捕获，并记录日志。</p>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>对于实现了<code>Closeable</code>接口的类，引用时可以使用<code>try()</code>包裹，可以自动关闭。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>io</category>
        <category>https</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>对==和equals()的理解</title>
    <url>/java/basic/java/%E5%AF%B9==%E5%92%8Cequals()%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="和equals的区别"><a href="#和equals的区别" class="headerlink" title="==和equals的区别"></a>==和equals的区别</h2><ul>
<li>== 是关系运算符，equals()是方法，都返回Boolean类型  </li>
<li>Object的 == 和 equals()都是比较的地址，作用相同  <a id="more"></a>
<h3 id="的作用"><a href="#的作用" class="headerlink" title="== 的作用"></a>== 的作用</h3></li>
<li>基本类型，比较值是否相同  </li>
<li>引用类型，比较内存地址是否相同  </li>
<li>不能比较没有父子关系的两个对象  <h3 id="equals-的作用"><a href="#equals-的作用" class="headerlink" title="equals() 的作用"></a>equals() 的作用</h3></li>
<li>jdk中的类已经重写过，比较的是内容。  </li>
<li>自定义的类没有重写equals()，将调用父类，即Object的equals()方法，其使用this == Obj，比较内存地址  </li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>对HashMap的理解</title>
    <url>/java/HashMap/java/%E5%AF%B9HashMap%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>从存储结构，索引，扩容，put方法，线程安全来简单说明，并讲述相关的如：HashTable，ConcurrentHashMap等</p>
<a id="more"></a>

<h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>jdk1.7中，由数组 + 链表组成，数组是hashMap的主体，链表用于处理哈希冲突。<br>jdk1.8中，由数组 + 链表 + 红黑树组成。红黑树复杂度为O(logn)，链表是O(n)，链表过长会影响hashMap的性能。链表和红黑树在满足一定条件时会进行转换。</p>
<ul>
<li>当链表超过8，且数据（数组长度）大于64时，转为红黑树。</li>
<li>链表超过8，数据长度小于64时，会对数组进行扩容。  </li>
</ul>
<p>红黑树需要左旋，右旋，变色来保持平衡，单链不需要。链表不超过8时，链表结构可以保证查询性能，大于8时，使用红黑树提高搜索性能，但新增节点时效率会变慢。</p>
<h2 id="索引计算"><a href="#索引计算" class="headerlink" title="索引计算"></a>索引计算</h2><p>先根据key值，计算出hashCode值，然后再计算出hash值，通过hash &amp; (length -     1) 计算出下标。<br><code>jdk1.8中异或其右移16位</code><br>jdk1.8中异或其右移16位的值，优化了高位运算的算法，可以在数组长度较小的时候，也可以保证高低bit都参与到hash的计算中，同时不会有太大的开销。<br><code>hash值与length-1相与（hash &amp; (length - 1)）</code><br>数组的长度都是2的n次方，hash &amp; (length - 1)等价于对hash取模，即hash%length，但&amp;比%更高效。<br><code>HashMap数组长度是2的幂次方</code><br>有助于减少hash冲突，不浪费空间。二进制为11111…方便与操作，实际使用中，其构造函数自动将传入的数组大小取最近的2的n次方，大于等于当前传入值。  </p>
<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>HashMap的容量超过负载因子定义的容量后，数组扩大为原来的2倍，将原来的对象放到新的数组中。<br>1.8中做了优化，元素会在原来的位置，或者在原来位置 + 原Hash表的长度，不需要重新计算hash，只需要看原来的hash中新增的bit是0还是1。0的话索引不变，1的话 + 原哈希表长度。</p>
<h2 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h2><ul>
<li>根据key值计算hash值，找到其在数组中的存储的下标  </li>
<li>判断数组是否为空，调用resize初始化</li>
<li>没有hash冲突，直接放在对应的数组下标中</li>
<li>有hash冲突，key存在，则覆盖value</li>
<li>有hash冲突，key不存在，是红黑树，就将节点挂在树上</li>
<li>有hash冲突，key不存在，是链表，判断链表是否大于8，如果大于8，数组容量小于64，进行扩容，大于8，数组容量大于64，转为红黑树；否则使用头插法，在链表中加入键值对。</li>
</ul>
<h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2>]]></content>
      <categories>
        <category>java</category>
        <category>HashMap</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>了解Markdown</title>
    <url>/Markdown/markdown/markdown/</url>
    <content><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 .md, .markdown。</p>
<a id="more"></a>
<h1 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h1><p>两种格式设置标题，倾向第二种</p>
<h2 id="1-使用-和-标记一级和二级标题"><a href="#1-使用-和-标记一级和二级标题" class="headerlink" title="1.使用 = 和 - 标记一级和二级标题"></a>1.使用 = 和 - 标记一级和二级标题</h2>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一级  二级</span><br><span class="line">&#x3D;&#x3D;&#x3D;   ---</span><br></pre></td></tr></table></figure>
<h2 id="2-使用-号标记标题"><a href="#2-使用-号标记标题" class="headerlink" title="2.使用 # 号标记标题"></a>2.使用 # 号标记标题</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个 # 表示一级 两个 # 表示二级，直到 ###### 六级</span><br><span class="line"># 一级  # 二级</span><br></pre></td></tr></table></figure>
<h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><p>使用两个以上空格加回车，构成一个段落</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>斜体文本</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*text* 或者 _text_</span><br></pre></td></tr></table></figure>
<p><strong>粗体文本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**text** 或者 __text__</span><br></pre></td></tr></table></figure>
<p><strong><em>粗斜体文本</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***text*** 或者 ___text___</span><br></pre></td></tr></table></figure>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线</p>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>abc</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~ abc ~~</span><br></pre></td></tr></table></figure>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>使用2个~~~构成代码块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~~ abc ~~~</span><br></pre></td></tr></table></figure>
<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 u 标签来实现：<br><u>下划线</u></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt; 下划线 &lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="#1">1.一级目录</a><br><a href="#1.1">1.1二级目录</a><br><a href="#1.1.1">1.1.1三级目录</a>  </p>
<h3 id='1'> 一级目录 </h3>
<h4 id='1.1'> 二级目录 </h4>
<h5 id='1.1.1'> 三级目录 </h5>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1.一级目录](#1)</span><br><span class="line">[1.1二级目录](#1.1)</span><br><span class="line">[1.1.1三级目录](#1.1.1)</span><br><span class="line">&lt;h3 id&#x3D;&#39;1&#39;&gt; 一级目录 &lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4 id&#x3D;&#39;1.1&#39;&gt; 二级目录 &lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5 id&#x3D;&#39;1.1.1&#39;&gt; 三级目录 &lt;&#x2F;h5&gt;</span><br></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://simafanyin.github.io/">司马梵音的博客</a>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[司马梵音的博客](https:&#x2F;&#x2F;simafanyin.github.io)  </span><br></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul>
<li>开头一个感叹号。  </li>
<li>接着一个方括号，里面放上图片的替代文字  </li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![img](&#x2F;images&#x2F;markdown&#x2F;v2-17b972c6b32398e3929c117ea00f79f4_b.jpg)</span><br></pre></td></tr></table></figure>
<img src="/images/markdown/v2-17b972c6b32398e3929c117ea00f79f4_b.jpg" alt="img"><br><img src="/images/markdown/wallhaven-z8mq8y.jpg" alt="img"></li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。<br>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。  </p>
<table>
<thead>
<tr>
<th align="center">表头1</th>
<th align="center">表头2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="center">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 表头1 | 表头2 |</span><br><span class="line">| :--: | :---: |</span><br><span class="line">| 单元格 | 单元格 |  </span><br><span class="line">| 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<h2 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure>
<h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p><strong>文本加粗</strong><br>** 正常显示星号 **</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br><span class="line"></span><br><span class="line">一些特殊符号：</span><br><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure>
<h2 id="HEXO创建文件指令"><a href="#HEXO创建文件指令" class="headerlink" title="HEXO创建文件指令"></a>HEXO创建文件指令</h2><p>hexo new 文件夹名 –path 文件夹名/文件名 “文件标题（通常与文件名一致）” ————在缺省主题 _post目录下创建<br>hexo new page –path 文件夹名/文件名 “文件标题（通常与文件名一致）” ————在source下创建<br>hexo new page –path 文件夹名/文件名 ————无文件标题时，在_post目录下，标题名为page</p>
<h2 id="使用Typora编写md文件"><a href="#使用Typora编写md文件" class="headerlink" title="使用Typora编写md文件"></a>使用Typora编写md文件</h2><p><img src="../../images/markdown/image-20211224103711151.png" alt="image-20211224103711151"></p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>使用Typora编写md文件比较方便，详情访问<a href="https://www.typora.io/">Typora官网</a></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>mqtt简介</title>
    <url>/uncategorized/mqtt/mqtt%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>“MQTT 是客户端服务器发布/订阅消息传输协议。它重量轻、开放、简单，并且设计得易于实施。这些特性使其非常适合在许多情况下使用，包括受限环境，例如机器对机器 (M2M) 和物联网 (IoT) 环境中的通信，在这些环境中需要少量代码占用空间和/或网络带宽非常宝贵。 “</p>
<p><em>引用自官方<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html">MQTT 3.1.1 规范</a></em></p>
<a id="more"></a>

<h2 id="mqtt基础"><a href="#mqtt基础" class="headerlink" title="mqtt基础"></a>mqtt基础</h2><h3 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h3><p>发布/订阅模式（也称为发布/订阅）提供了传统客户端-服务器架构的替代方案。在客户端-服务器模型中，客户端直接与端点通信。发布/<strong>订阅</strong>模型<strong>将发送消息的客户端（发布者）与接收消息的客户端（订阅者）分离</strong>。发布者和订阅者从不直接相互联系。事实上，他们甚至不知道另一个存在。<strong>它们之间的连接由第三个组件（代理）处理</strong>。代理的工作是过滤所有传入的消息并将它们正确地分发给订阅者。</p>
<p><img src="/images/mqtt/image-20211222141005739.png" alt="image-20211222141005739"></p>
<p>pub/sub 最重要的方面是消息的发布者与接收者（订阅者）的解耦。这种解耦有几个维度：</p>
<ul>
<li><strong>空间解耦：</strong>发布者和订阅者不需要相互了解（例如，不交换IP地址和端口）。</li>
<li><strong>时间解耦：</strong>发布者和订阅者不需要同时运行。</li>
<li><strong>同步解耦：</strong>两个组件的操作在发布或接收时不需要中断。</li>
</ul>
<p>总之，发布/订阅模型消除了消息发布者和接收者/订阅者之间的直接通信。代理的过滤活动可以控制哪个客户端/订阅者接收哪个消息。解耦包括三个维度：空间、时间和同步。</p>
<h4 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h4><p><strong>发布/订阅比传统的客户端-服务器方法更好地扩展</strong>。这是因为代理上的操作可以高度并行化，并且可以以事件驱动的方式处理消息。消息缓存和消息的智能路由通常是提高可扩展性的决定性因素。尽管如此，扩展到数百万个连接是一个挑战。可以通过集群代理节点实现如此高水平的连接，以使用负载平衡器将负载分布到更多的单个服务器上。</p>
<h4 id="消息过滤"><a href="#消息过滤" class="headerlink" title="消息过滤"></a>消息过滤</h4><h5 id="选项-1：基于主题的过滤"><a href="#选项-1：基于主题的过滤" class="headerlink" title="选项 1：基于主题的过滤"></a>选项 1：基于主题的过滤</h5><p>此过滤基于属于每条消息的主题或<a href="https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices">主题</a>。接收客户端向代理订阅感兴趣的主题。从那时起，代理确保接收客户端获取所有发布到订阅主题的消息。通常，主题是具有分层结构的字符串，允许基于有限数量的表达式进行过滤。</p>
<h5 id="选项-2：基于内容的过滤"><a href="#选项-2：基于内容的过滤" class="headerlink" title="选项 2：基于内容的过滤"></a>选项 2：基于内容的过滤</h5><p>在基于内容的过滤中，代理根据特定的内容过滤语言过滤消息。接收客户端订阅过滤他们感兴趣的消息查询。这种方法的一个显着缺点是必须事先知道消息的内容，不能加密或轻易更改。</p>
<h5 id="选项-3：基于类型的过滤"><a href="#选项-3：基于类型的过滤" class="headerlink" title="选项 3：基于类型的过滤"></a>选项 3：基于类型的过滤</h5><p>当使用面向对象的语言时，基于消息（事件）的类型/类进行过滤是一种常见做法。例如，订阅者可以收听所有类型为 Exception 或任何子类型的消息。</p>
<h4 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h4><p>MQTT 具有三个服务质量 (QoS) 级别</p>
<p><strong>MQTT 体现了我们提到的 pub/sub 的所有方面</strong>：</p>
<ul>
<li>MQTT 在空间上分离了发布者和订阅者。要发布或接收消息，发布者和订阅者只需要知道代理的主机名/IP 和端口。</li>
<li>MQTT 按时间解耦。尽管大多数 MQTT 用例都近乎实时地传递消息，但如果需要，代理可以为不在线的客户端存储消息。（必须满足两个条件才能存储消息：客户端已连接到持久会话并订阅了<a href="https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels/">服务质量</a>大于 0 的主题）。</li>
<li>MQTT 异步工作。由于大多数客户端库异步工作并且基于回调或类似模型，因此在等待消息或发布消息时不会阻塞任务。在某些用例中，同步是可取的，也是可能的。为了等待某个消息，一些库具有同步 API。但流程通常是异步的。</li>
</ul>
<h4 id="与消息队列的区别"><a href="#与消息队列的区别" class="headerlink" title="与消息队列的区别"></a>与消息队列的区别</h4><p><strong>消息队列存储消息直到它们被消费</strong> 当您使用消息队列时，每条传入的消息都存储在队列中，直到被客户端（通常称为消费者）接收为止。如果没有客户端接收到消息，则消息将停留在队列中并等待被消费。在消息队列中，消息不可能不被任何客户端处理，就像在 MQTT 中没有人订阅主题一样。</p>
<p><strong>一条消息只被一个客户端消费</strong> 另一个很大的区别是，在传统的消息队列中，一条消息只能被一个消费者处理。负载分布在队列的所有消费者之间。在 MQTT 中，行为恰恰相反：订阅主题的每个订阅者都会收到消息。</p>
<p><strong>队列是命名的，必须显式创建</strong> 。队列比主题严格得多。在使用队列之前，必须使用单独的命令显式创建队列。只有在队列命名和创建之后，才可以发布或消费消息。相比之下，MQTT 主题非常灵活，可以即时创建。</p>
<h3 id="Client、broker和连接建立"><a href="#Client、broker和连接建立" class="headerlink" title="Client、broker和连接建立"></a>Client、broker和连接建立</h3><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>当我们谈论客户端时，我们几乎总是指<a href="https://www.hivemq.com/blog/seven-best-mqtt-client-tools/">MQTT 客户端</a>。发布者和订阅者都是 MQTT 客户端。发布者和订阅者标签是指客户端当前是在发布消息还是订阅接收消息（发布和订阅功能也可以在同一个 MQTT 客户端中实现）。<strong>MQTT 客户端是运行 MQTT 库并通过网络连接到<a href="https://www.hivemq.com/hivemq/">MQTT 代理的</a>任何设备（从微控制器到成熟的服务器）。</strong>例如，MQTT 客户端可以是一个非常小的、资源受限的设备，它通过无线网络进行连接并拥有一个最低限度的库。MQTT 客户端也可以是运行图形 MQTT 客户端以进行测试的典型计算机。基本上，任何通过 TCP/IP 堆栈使用 MQTT 的设备都可以称为 MQTT 客户端。MQTT 协议的客户端实现非常简单直接。易于实施是 MQTT 非常适合小型设备的原因之一。<strong>MQTT 客户端库可用于多种编程语言。例如，Android、Arduino、C、C++、C#、Go、iOS、Java、JavaScript 和 .NET。</strong>您可以在<a href="https://github.com/mqtt/mqtt.github.io/wiki/libraries">MQTT wiki</a>上查看完整列表。</p>
<h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><p>Broker<strong>负责接收所有消息，过滤消息，确定谁订阅了每条消息，并将消息发送给这些订阅的客户端。</strong>Broker还保存所有具有持久会话的客户端的会话数据，包括订阅和错过的消息（更多<a href="https://www.hivemq.com/blog/mqtt-essentials-part-7-persistent-session-queuing-messages/">详细信息</a>）。Broker的另一个职责是客户端的身份验证和授权。通常，Broker是可扩展的，这有助于自定义身份验证、授权和集成到后端系统中。集成尤其重要，因为Broker通常是直接暴露在 Internet 上的组件，处理大量客户端，并且需要将消息传递到下游分析和处理系统。订阅所有消息并不是一个真正的选择。简而言之，Broker是每个消息必须通过的中心枢纽。因此，<strong>重要的是您的Broker具有高度可扩展性、可集成到后端系统、易于监控和（当然）抗故障。</strong></p>
<h4 id="MQTT-连接"><a href="#MQTT-连接" class="headerlink" title="MQTT 连接"></a>MQTT 连接</h4><p>MQTT 协议基于 TCP/IP。客户端和代理都需要有一个 TCP/IP 堆栈。</p>
<p><img src="/images/mqtt/image-20211222144951371.png" alt="image-20211222144951371"></p>
<p>MQTT 连接始终位于一个客户端和Broker之间。客户端从不直接相互连接。要发起连接，<strong>客户端向Broker发送 CONNECT 消息。Broker使用 CONNACK 消息</strong>和状态代码进行<strong>响应</strong>。建立连接后，Broker将保持打开状态，直到客户端发送断开连接命令或连接中断。</p>
<p><img src="/images/mqtt/image-20211222145009476.png" alt="image-20211222145009476"></p>
<h4 id="通过-NAT-的-MQTT-连接"><a href="#通过-NAT-的-MQTT-连接" class="headerlink" title="通过 NAT 的 MQTT 连接"></a>通过 NAT 的 MQTT 连接</h4><p>在许多常见用例中，MQTT 客户端位于路由器后面，该路由器使用网络地址转换 (NAT) 从私有网络地址（如 192.168.xx、10.0.xx）转换为面向公众的地址。正如我们已经提到的，MQTT 客户端通过向代理发送 CONNECT 消息来启动连接。因为代理有一个公共地址并保持连接打开以允许双向发送和接收消息（在初始 CONNECT 之后），位于 NAT 后面的客户端完全没有问题。</p>
<h4 id="客户端用-CONNECT-消息发起连接"><a href="#客户端用-CONNECT-消息发起连接" class="headerlink" title="客户端用 CONNECT 消息发起连接"></a>客户端用 CONNECT 消息发起连接</h4><p>现在让我们看看<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028">MQTT CONNECT</a>命令消息。为了启动连接，客户端向代理发送命令消息。如果此 CONNECT 消息格式错误（根据 MQTT 规范）或打开网络套接字和发送连接消息之间的时间过长，代理将关闭连接。此行为可阻止可能降低代理速度的恶意客户端。 <strong>一个善良的 MQTT 3 客户端发送一条连接消息，其中包含以下内容</strong>（除其他外）：</p>
<p><img src="/images/mqtt/image-20211222171611919.png" alt="image-20211222171611919"></p>
<h4 id="ClientId"><a href="#ClientId" class="headerlink" title="ClientId"></a>ClientId</h4><p>(ClientId)<strong>标识</strong>连接到 MQTT 代理的<strong>每个 MQTT 客户端</strong>。Broker 使用 ClientId 来标识客户端和客户端的当前状态。因此，这个 Id 对于每个客户端和 Broker 应该是唯一的。在 MQTT 3.1.1 中，如果您不需要Broker 持有状态，您可以发送一个空的 ClientId。空的 ClientId 导致连接没有任何状态。在这种情况下，clean session 标志必须设置为 true，否则Broker 将拒绝连接。</p>
<h3 id="发布、订阅和取消订阅"><a href="#发布、订阅和取消订阅" class="headerlink" title="发布、订阅和取消订阅"></a>发布、订阅和取消订阅</h3><h2 id="MQTT特性"><a href="#MQTT特性" class="headerlink" title="MQTT特性"></a>MQTT特性</h2><h2 id="MQTT特殊"><a href="#MQTT特殊" class="headerlink" title="MQTT特殊"></a>MQTT特殊</h2>]]></content>
  </entry>
  <entry>
    <title>数组的理解</title>
    <url>/java/%E6%95%B0%E7%BB%84/java/%E6%95%B0%E7%BB%84%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="从内存角度出发"><a href="#从内存角度出发" class="headerlink" title="从内存角度出发"></a>从内存角度出发</h2><p>定义并初始化一个数组时，实际的数组对象被存储在<code>堆（heap）</code>中，通过其引用变量访问。引用变量存放在<code>栈（stack）</code>中。内存提供了<code>2</code>块空间，一个方法被调用时，其内部引用参数变量都存放在<code>栈</code>中，实际对象存放在数据区<code>堆</code>中，方法执行完毕后，对应的<code>栈</code>就直接回收，但<code>堆</code>中的数据，如果被其他引用参数引用，则不会被回收（对象的创建耗资源）。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>spring</title>
    <url>/uncategorized/spring5/spring/</url>
    <content><![CDATA[<h1 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><ul>
<li>Spring是一个开源框架，它由 <em>Rod Johnson</em> 创建，他是音乐家。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。</li>
<li>2002，首次推出Spring框架的雏形，<a href="https://www.interface21.io/">interface21</a> 框架。</li>
<li>2004年3月24号，Spring框架是以interface21框架为基础,经过重新设计,并不断丰富其内涵,于<em>2004年3月24</em>日,发布了1.0正式版本。</li>
<li>理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架</li>
<li>SSH： Struct2 + Spring + Hibernate</li>
<li>SSM：SpringMVC + Spring + Mybatis</li>
</ul>
<a id="more"></a>

<p>官网：<a href="https://spring.io/">https://spring.io/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring的包，包含了其他的包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接数据库 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h2><ul>
<li>Spring是一个开源的免费的框架（容器）</li>
<li>Spring是一个轻量级的，非入侵式的框架</li>
<li>控制反转（IOC），面向切面（AOP）</li>
<li>支持事务的处理，对框架整合的支持</li>
</ul>
<p>==总结：Spring就是一个轻量级的，控制反转（IOC），面向切面（AOP）的框架==</p>
<h2 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h2><p><img src="/images/spring/seven.png" alt="img"></p>
<h2 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h2><p>现代java的开发就是Spring的开发</p>
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>基于SpringBoot实现</li>
</ul>
</li>
</ul>
<p>学习SpringBoot的前提，是完全掌握Spring及SpringMVC。</p>
<p>后续…</p>
<h1 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h1><p>1.UserDao 接口</p>
<p>2.UserDaoImp l实现类</p>
<p>3.UserService 业务接口</p>
<p>4.UserServiceImpl 业务实现类</p>
<p>之前的业务，用户的需求可能会影响我们原有的代码，成本代价昂贵</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">// 利用set进行动态实现值的注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用set接口，程序不再具有主动性，程序不用管理对象的创建，使主动权再客户中，不用修改原有代码，降低系统耦合性。</p>
<h2 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h2><p>控制反转（Inversion of Control），是一种设计思想，<strong>DI（依赖注入）是实现IoC的一种方法</strong>。没有IoC的程序中，对象的创建由程序自己控制，控制反转即：获取依赖对象的方式由程序自己转为客户控制。</p>
<p>可通过XML、注解等方式配置Bean。采用XML方式时，Bean的定义信息和实现是分离的，而采用注解的方式可以把两者合二为一。</p>
<p><strong>控制反转是一种通过描述（XML或注解）并通过第三方生产特点对象的方式。</strong></p>
<p><strong>在Spring中实现控制反转的是IoC容器，实现方式是依赖注入（Dependency Injection，DI）。</strong></p>
<p><strong>控制</strong>：谁来控制对象的创建，之前的对象由程序本身控制创建，使用Spring后，对象是由Spring来创建的。</p>
<p><strong>反转</strong>：程序本身不创建对象，而变成被动的接收对象。</p>
<p><strong>依赖注入</strong>：就是利用set方法来进行注入的。</p>
<p>==所谓的IOC就是对象由Spring来创建==</p>
<h1 id="3、IOC创建对象的方式"><a href="#3、IOC创建对象的方式" class="headerlink" title="3、IOC创建对象的方式"></a>3、IOC创建对象的方式</h1><p>定义一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.simafanyin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User的无参构造！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User的有参构造&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.simafanyin.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        user.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.使用无参构造创建对象，默认！</p>
<ul>
<li><p>创建一个bean后，缺省使用对象的无参构造方法创建对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/spring/image-20210824115111162.png" alt="image-20210824115111162"></p>
</li>
</ul>
<p>2.使用有参构造创建对象，bean中需要添加其他的一些属性，实体对象需要实现其有参构造方法，否则不能创建。</p>
<ul>
<li><p>下标方式，index=0表示User中第1个参数，即name字段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>类型，通过传入参数类型，需要构造函数中的参数类型都不同，不建议使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过参数名设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/spring/image-20210824115247813.png" alt="image-20210824115247813"></p>
<p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了。  </p>
</li>
</ul>
<h1 id="4、Spring配置"><a href="#4、Spring配置" class="headerlink" title="4、Spring配置"></a>4、Spring配置</h1><p>bean标签中的属性配置</p>
<h2 id="4-1、别名"><a href="#4-1、别名" class="headerlink" title="4.1、别名"></a>4.1、别名</h2><p>设置bean中user的别名为user2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/spring/image-20210824150344914.png" alt="image-20210824150344914"></p>
<img src="/images/spring/image-20210824150432341.png"/>

<h2 id="4-2、Bean的配置"><a href="#4-2、Bean的配置" class="headerlink" title="4.2、Bean的配置"></a>4.2、Bean的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> id :bean的唯一标识符</span></span><br><span class="line"><span class="comment"> class: bean对象所对应的全限定名： 包名 + 类名</span></span><br><span class="line"><span class="comment"> name: 也是别名，而且可以通过逗号、分号、空格等方式定义多个别名</span></span><br><span class="line"><span class="comment"> scope: 单利模式，缺省</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user1 user2, user3; user4&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-3、import"><a href="#4-3、import" class="headerlink" title="4.3、import"></a>4.3、import</h2><p>资源文件中的多个applicationContext.xml文件，通过import，将所有bean.xml文件合并为一个总的文件。相同的bean，根据导出的顺序，后者会覆盖前者。</p>
<h1 id="5、依赖注入"><a href="#5、依赖注入" class="headerlink" title="5、依赖注入"></a>5、依赖注入</h1><h2 id="5-1、构造器注入"><a href="#5-1、构造器注入" class="headerlink" title="5.1、构造器注入"></a>5.1、构造器注入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">((UserServiceImpl) userService).setUserDao(<span class="keyword">new</span> UserDaoImpl());</span><br><span class="line">userService.getUser();</span><br></pre></td></tr></table></figure>
<p>其中的<em>new UserDaoImpl()</em> 可以使用其他继承UserDao的类</p>
<h2 id="5-2、set方式注入【重点】"><a href="#5-2、set方式注入【重点】" class="headerlink" title="5.2、set方式注入【重点】"></a>5.2、set方式注入【重点】</h2><ul>
<li>依赖注入：set注入<ul>
<li>依赖：bean对象的创建依赖于容器</li>
<li>注入：bean对象中的属性，由容器来注入</li>
</ul>
</li>
</ul>
<p>1、复杂类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.simafanyin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、真实测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.simafanyin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, Object&gt; card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGames</span><span class="params">(Set&lt;String&gt; games)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、bean.xml(个人命名，标准为applicationContext.xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Shanghai&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通值注入，value --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;司马梵音&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Bean注入，ref --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数组 array --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- List --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Map --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">key-type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3442309183493411222&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;644299910023003&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;学生证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20331123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Set --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- null --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Properties --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.simafanyin.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        Student student = context.getBean(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student&#123;</span><br><span class="line">    name=<span class="string">&#x27;司马梵音&#x27;</span>, </span><br><span class="line">    address=Address&#123;address=<span class="string">&#x27;Shanghai&#x27;</span>&#125;, </span><br><span class="line">    books=[红楼梦, 西游记, 三国演义, 水浒传], </span><br><span class="line">    hobbies=[听歌, 敲代码, 看电影], </span><br><span class="line">    card=&#123;身份证=<span class="number">3442309183493411222</span>, 银行卡=<span class="number">644299910023003</span>, 学生证=<span class="number">20331123</span>&#125;, </span><br><span class="line">    games=[LOL, BOB], </span><br><span class="line">    wife=<span class="string">&#x27;null&#x27;</span>, </span><br><span class="line">    info=&#123;password=<span class="number">123456</span>, username=root&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-3、拓展方式注入"><a href="#5-3、拓展方式注入" class="headerlink" title="5.3、拓展方式注入"></a>5.3、拓展方式注入</h2><p>使用 <em>P命名空间</em> 和 <em>C命名空间</em> 进行注入，需要导入对应的约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;</span><br><span class="line">xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;</span><br></pre></td></tr></table></figure>
<p>比如p</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;23&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>p命名空间注入，可以直接注入属性的值：property</p>
<p>c命名空间注入，通过构造器注入：construct-args</p>
<h2 id="5-4、bean的作用域"><a href="#5-4、bean的作用域" class="headerlink" title="5.4、bean的作用域"></a>5.4、bean的作用域</h2><p><img src="/images/spring/image-20210824160932866.png" alt="image-20210824160932866"></p>
<p>1.单列模式（Spring默认机制）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<p>2.原型模式：每次从容器中get的时候，都产生一个新对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.simafanyin.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="6、Bean的自动装配"><a href="#6、Bean的自动装配" class="headerlink" title="6、Bean的自动装配"></a>6、Bean的自动装配</h1><p>Spring会在上下文中自动寻找，并自动给bean装配属性</p>
<p>三种配置方式</p>
<ul>
<li>在xml中显示的装配</li>
<li>在java中显示配置</li>
<li>==隐式的自动配置bean==</li>
</ul>
<h2 id="6-1-byName-byType"><a href="#6-1-byName-byType" class="headerlink" title="6.1 byName, byType"></a>6.1 byName, byType</h2><p>通过配置<em>autowire</em>属性，设置byName或者byType进行自动装配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;address&quot; class&#x3D;&quot;com.simafanyin.pojo.Address&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;address&quot; value&#x3D;&quot;Shanghai&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.simafanyin.pojo.Student&quot; autowire&#x3D;&quot;byName&quot;&gt;</span><br><span class="line">    &lt;!-- Bean注入，ref --&gt;</span><br><span class="line">    &lt;!-- &lt;property name&#x3D;&quot;address&quot; ref&#x3D;&quot;address&quot;&#x2F;&gt; --&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>byName:会自动在容器上下文查找，自己对象的属性名对应的bean id。匹配对应的set方法进行赋值。</p>
<p>byType:会自动在容器上下文查找，自己对象的类型对应的bean classs。匹配对应的set方法进行赋值。</p>
<h2 id="6-2-使用注解进行自动装配"><a href="#6-2-使用注解进行自动装配" class="headerlink" title="6.2 使用注解进行自动装配"></a>6.2 使用注解进行自动装配</h2><p>1.导入约束： context约束</p>
<p>2.==配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a>==</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>@Autowired 先类型，后名字来寻找属性  </p>
<p>类属性使用，或者set方法上使用</p>
<p>使用Autowired，不需要编写set方法，前提是自动装配的属性在IOC(String) 容器中存在，且符合类型ByType</p>
]]></content>
  </entry>
  <entry>
    <title>springBoot</title>
    <url>/uncategorized/spring5/springBoot/</url>
    <content><![CDATA[<a id="more"></a>]]></content>
  </entry>
  <entry>
    <title>hello</title>
    <url>/uncategorized/test/hello/</url>
    <content><![CDATA[<p>ffffffff</p>
<p>插入图片</p>
<p><img src="../../images/hello/image-20211224103430258.png" alt="image-20211224103430258"></p>
]]></content>
  </entry>
  <entry>
    <title>了解Zookeeper</title>
    <url>/Zookeeper/zookeeper/understandZookeeper/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><a id="more"></a>]]></content>
      <categories>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
</search>
